(define (make-account balance init-password)
  (let ((passwords (list init-password)))
    (define (pw-correct? pw)
      (define (iter pw-list)
        (cond ((null? pw-list) false)
              ((eq? pw (car pw-list)) true)
              (else (iter (cdr pw-list)))))
      (iter passwords))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (joint pw)
      (set! passwords (cons pw passwords)))
    (define (dispatch m pw)
      (if (pw-correct? pw)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                ((eq? m 'joint) joint)
                (else (error "Unknown request -- MAKE-ACCOUNT"
                             m)))
          (error "Incorrect password")))
    dispatch))

(define (make-joint acc init-pw own-pw)
  ((acc 'joint init-pw) own-pw)
  acc)

;;; test
(define paul-acc (make-account 100 'love-summer))
((paul-acc 'withdraw 'love-summer) 21)
(define joe-acc (make-joint paul-acc 'love-summer 'go-swimming))
((joe-acc 'deposit 'go-swimming) 99999)
